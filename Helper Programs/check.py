from Bio import SeqIO
from itertools import product
import numpy as np
import os

folder = "toCheck"

def smith_waterman(sequence1, sequence2, match_score = 1, mismatch_score = -0, gap_penalty = -1):
    # Initialize the score matrix and traceback matrix
    rows = len(sequence1) + 1
    cols = len(sequence2) + 1
    score_matrix = np.zeros((rows, cols))
    traceback_matrix = np.zeros((rows, cols), dtype=int)

    # Fill the score and traceback matrices
    for i, j in product(range(1, rows), range(1, cols)):
        if sequence1[i - 1] == sequence2[j - 1]:
            to_add = match_score 
        else:
            to_add = mismatch_score
        match = score_matrix[i - 1, j - 1] + to_add
        delete = score_matrix[i - 1, j] + gap_penalty
        insert = score_matrix[i, j - 1] + gap_penalty
        score_matrix[i, j] = max(0, match, delete, insert)

        if score_matrix[i, j] == match:
            traceback_matrix[i, j] = 1  # Diagonal
        elif score_matrix[i, j] == delete:
            traceback_matrix[i, j] = 2  # Up
        elif score_matrix[i, j] == insert:
            traceback_matrix[i, j] = 3  # Left

    # Find the cell with the maximum score in the score matrix
    max_score = np.max(score_matrix)
    max_i, max_j = np.unravel_index(np.argmax(score_matrix), score_matrix.shape)

    # Traceback to find the alignment
    aligned_seq1 = ""
    aligned_seq2 = ""
    i, j = max_i, max_j

    while i > 0 and j > 0 and score_matrix[i, j] > 0:
        if traceback_matrix[i, j] == 1:  # Diagonal
            aligned_seq1 = sequence1[i - 1] + aligned_seq1
            aligned_seq2 = sequence2[j - 1] + aligned_seq2
            i -= 1
            j -= 1
        elif traceback_matrix[i, j] == 2:  # Up, gap in sequence 2
            aligned_seq1 = sequence1[i - 1] + aligned_seq1
            aligned_seq2 = "-" + aligned_seq2
            i -= 1
        elif traceback_matrix[i, j] == 3:  # Left, gap in sequence 1
            aligned_seq1 = "-" + aligned_seq1
            aligned_seq2 = sequence2[j - 1] + aligned_seq2
            j -= 1

    return aligned_seq1, aligned_seq2, max_score

seqs = {
    "BbrUI": "ATGGCTGCCGTAAATCTCTGGACACGGGAACAGTTGCTGGTAGCTTTTACGCTATACAGCCAAATCCCCTTTGGTAAATTGCACGCCAAAAACCCCGACATTATCCACTATGCTGGGTTAATCGGCCGCTCACCTTCCGCATTGGCAATGAAGTTAGTGAATATCGCCAGCCTAGATCCGTTTATCGTTAACTCTGGCCGTCGTGGACTGACTGGGGCATCCAAAGCAGATGAAGCGCTATGGCAGGAAATGAACCTCGACAGTGACACCTTTGAACGGCAGTGCCAATTGGCAATGACAGAGTTGGAGCCTCCGGTCACCGCCTTACATGACAGCGCAATAGAAGACTTCAGTGGCAGAGAAAGAACCACCATCATCAATGCGCGTGTTGGTCAGCAGTTGTTTCGCAAACGGGTGCTGGATGCCTATGAAAATCGCTGTTGCCTGACCGAACTGGAAGAACCGATGCTGCTGGTCGCCAGCCATATCCGCCCGTGGAAGCATACCGTTGAACATCGGCTCAACCCCAACAACGGCTTATGTCTGTCCAACCTGCACGACAAAGCGTTCGATCGCGGATTAATCACCTTTAATGAACACCTTGAGCTGGTGCTTTCGCCGCGCCTTAAACAACTGAAAAGCGCCATCAGCGAAGAGAACTTTGCCAAATATGAAGGTCGCAGGCTAAGGCTGCCAATAGACTTCCCTCCAGATGCCCACCAGTTGGCCTATCATCGGCAGAACATCTTTATCGCTAAAAACTGA",
    "M.CcrNAIV": "ATGAGATTTGCAGAGTTTTTTGCTGGAGTGGGATTGGTGCGGGAAGGGCTTGAGGGTTCTGGTTGGCAGTGTGTATGGGCCAATGATATTTCTGCCGATAAAATGAGTACTTATGTAGAAAACTATGGTGATGATCATTTTCATTTAGAAGATATTTGGAAGGTAGCAGCTGAACCTGACGGTATTCTTCCGAAGGATGTTTTCCTTTACACCGCTTCATTCCCTTGCACTGACTTATCTGTAGCTGGAGCTAGAGCTGGGCTTGCAGGGGAGGAGTCTGGGACGCTTAACGCTGTTTTAAAGATTCTTGAGCAAAAAAAGCTTGCAAATGATTTACCTAAAGTTGTCATGCTTGAGAATGTATCCGGCTTCTTGACCTCACATGGTGGGAAAGATGTTGCCCAGACAGTTAAGGTGTTGTCAGAGCTTGGTTACGTAATCGATATTATTGAGTTGGATGCAGCTCTTTTCACTCCGCAAAGCAGGCCTCGTGTTTTTTTGATTGCAGTGGAAGAGGCTATTGCGACCAGATTTATGCATGTAAAAAACGCTGATGACCTTTTCGACTCATGGTGGCAGAAGTTTGATGAACAGCCAAAGCTTCGCTCAGCTAAGTTAAAAAAGCTCATTGCTTCCAATGAAGAGCTGAATTGGGGATTGCTTGATATTCCTCTTCCTGAGCCAAGAACAGCAACTTTGAACGATATCATCGAGCTTGATATCCCGGATGATTCTTCGTTATGGTGGTCAGATGACCGCAAGAATCATTTATTAGCTCAGATGAATCCTGCTCATCAAGCAAAGCTACAAGCAATGATGGACAACAGGTTTTTCTCATACGGTACCGTATTCAGAAGAATGAGGGCTGGCGTCTCTATGGCTGAGCTGCGAACTGACGGTATCGCTGGATGTTTAAGAACTCCTCGTGGGGGCTCTAGCAAACAGATATTGGTACGTGCCGGAAACGGTGGATGGGGGGTAAGATTGCTTACGCCTAGGGAGTATGCTCGTTTACAGGGTGTGCGTGATAGCTTTGTGTTACCAAAAAATGTTAACAAAGGATATTTCGCAATGGGAGATGCCGTTTGTGTGCCAGCAATCGAGCATCTGTCAAAATACGCACTTACTCCTATCTATAGGTTTTCTCAGGCTTCTTAA", 
    "BsuRI": "ATGCCAAACCCAACGCCAAGAAAAAGTGGAGATCTCCACGTTCAAGCGGTTACTTCTGAAATCCAGCGCTATTTACAGGCGAAAACGCTTCCGAAAGCTGATGGGATTGCTTCGGGGACTGCGCGATTTATCATTGAGCAGCAAAGTAACATCTCTCAAGTCACGAACAAATTTGAGGCTGACAACTCAAATGTCGCTCCTGATCTAACCTTGCATCTAGCTAATGGAGACGTTGTTTGTGTCAACCTGTTCAAAATAAGGCCTAAAAGAGTGATACAGCCAAAGAATTTAGGAGCAAAAAGCTTTATTGCAAAATACTTTGGATCAGCTTCCCTTCAGAGTGAATTCAATGATTACTTTGCTAAGGTTTACCGTCAGTTTTTACTCGATAGTGCTAATCGCATAGTGGGTGATGTATCTAATGAGGCGACAGAACGTGAATTGAAGCGTTTACTAAAAGAGTCTTGTCCTAAGTTCACGCAAGAACTTGAAGAGTTTCGCAGTAAGCTTCTTTATGAGCTGAGAGAGAAATGCTTTGGCTTGTTTCTGGATGAATATAACCAAGCCTCTGAAACCATCGAAAAGGCATTTAACTCCTTGTTTATGACTGACTCCTTCAATGTTATTACTCAGTATGATGGCGAAAGGCTAAAGGGTGTTAAAGAATTTAAAATTGATGTTCACGAGATAAAAAACGTCAGCATATCCAAGGTTGGCTCGAATTCCGTTGGCATTACTGCCGACAATATTACGCTGTTGATCCGATTTAAGTTTGAAAGTGGTCCTGACTCTGCGATCAAGCTAGCGACCAGCTACGCAACACCTAAAGCTGAGAATAAGATCGCTCAGGGTAATGCGCGATCTTTGCAGCAGTTTAACGATGCTTTGTCTGTTACACATAAACCTGAAGGTGGGAAAGCGAATTCCAACGCAATCGGCAAGTGCTCCGAAGCTATTTTTTATGCTCAGCTTCTCAAGGTAAACCCAAATACCATCCAGCTTGATAACCATGCGTTTATTGAGATGTTCGCGAAATATTCACCGGATATTACTGCTACAGAGTTCGAAGGGATACGAGCGACTTCTGTTGGTGCAGTGGATGGTTTAAGCGCGTTTTTGAAAGAAAAGCATGGTGGCTTTAAGATCGATTCTATCGAGCTAGTGCCTGATGCGTATTTGGACAACCGCCTCAACACTGCCGATATTGAGTTAGTGCTACGAGTAGGAGATAAGTACGTAACGGAACCTATCTCTCTGAAGGCAATTGCTAAGGCGACCAATACCATTAACTGTAAAAACCCGGGTATTGGGCAAATTTTGGGGAACACTTATTTCGACCTCAGACAAGAAGAGCTCAATGGCACGCTTGAGGCGCTGAAAGAAACGTTCATTAATGATGATGCAGGACGAAGTAGGACGTTGGAATGCCTCTCGGGCAATATTGGTAAACAACTCGCTAACGCGGTAGAAAGTGAGCCACAAAAGCTCATTAAAGGCACTAAAGCGTTGTTGGGTAGTGCGCTGGTGGTTGTGGTCTATTATGCGGACAACAAGTATGCAGTGCTAGAACATGACTTTTCGATTACCAAAGTTCAGGTGCATCGAGACACTCCTTCTTTAATTCAAAACACCTTGTCTTGGTCTCATGGTGGGGATCAAGTGAGATTACGGGTCAAATTCAGTGGGGGTCAATCTCACGGCTGGACATCAATCAAGTTGGCATGCGCTTATACCTTTGCCAAAGAAAGAATCCGCAGTAATGTGTGA",
    "M.DthII": "ATGACACAACGAATCGTTTCTTTTTTTGCTGGGGCTGGTGGCTTAGACCTAGGGTTCGAACAAGCTGGGTTCAATGTAACTTGGGCTAACGAATACGATAAAGATATTTGGGCGACATACGAGAAGAACCATCCTCACACTACGTTGGACAGACGTAGTATCACAAACATTGATGCGGATGAAGTGCCTGAATGTGATGGTATTATTGGTGGTCCACCATGCCAAAGCTGGAGTGAAGCGGGTGCACAACGTGGTATCGAAGACAAGCGTGGTCAGCTGTTCTTCGATTTTATCCGTATCCTAGAAGCGAAAAAGCCCAAGTTCTTCTTGGCTGAAAACGTAAGTGGTATGCAGCACACACGCCATGCAAACGCGCTCAACAACATCAAGCAGATGTTTAAAGATGCTGGTTATGATTTGTATTACCAGATGATGAACGCGGTTGATTACGGCGCTGCGCAAGACAGAAAGCGCGTTATCTTTATTGGCTTCAGAAGTGACTTAAACATCAAGTACACCTTCCCAGAACCAATGGAAAAAACAGAACGTCGCACCTTGAAGCACGTGATTGCAGACCTTGATGGAACGGCAGTGCCTGCATTAGACAAGCAGAAGCCAAACCCAGATGTAAAAGTGCTAAACCACGAGTACATGATTGGCGGTTTCTCTACGATGTTTATGTCTCGAAACCGAGTGAGAACTTGGGATGAGCCTTCTTTTACCATTCAGGCTGGCGGTCGCCACGCACCGATTCACCCAGGCGCGCCAAAAATGGAAAAAGTAGAGACAGACAAGTTTAAGTTTGTGGAAGGTCACGAAGACAAATATCGCCGTCTGAGTGTGCGTGAGTGTGCACGAATTCAGGGCTTCCCGAATGACTTTGAGTTCGTTTACAACAATGTTGCAGCGGGCTACAAGATGATTGGTAATGCTGTTGCTGTCCCTTTTGCAAAAGCATTGGCTTTAAGCATTCAAGAGCACCTAGCTCAAGCAAAAGATCTTAAAGCCGCTTAA",
    "FokI": "GTGGCAGACAGAACATTTGGCTGGGTACAGGAGGCTTATACCCTGGGAAATTTAAAGAATGTGGTATCCGTATTTGTGCCGGGATCCAGAATTAACCGGCTTCTTTGTACGGATAAAATTCCAAGGCTTATCTCCGAAAAGGATGGAAGGGATGATTTTATCCGTGAGCTTTCTGAGGAGATAATCTGTATCCCATATACCCATCTGAAGGGAAAGGGAACCCCCAGCGGGTTTACAAGAAGCAATGCACCCTGTTCCGGTATCATACAGGCCGTACTTCCAGGGCAGCGTAAGGAATATCAAAGTGACTGGCCGGCAGATTCCTTTTTAAGATGGGCAGTCAGTGTGGGATTCCTTTCCTACAGCAGAACACAGGATGCTTGTTCCATTACAGAACTGGGTCACCAGTATGCATTGGCTTTGGAAGGAAGTGAAGAAGAGGCAGAGGTCCTTAAAACAGCATTTTTATCCTATCCTCCTGTTTGCAGGGTTATGTCCTTATTAGGGGAAGAAGAGCATCTGACGAAATTTGAAATAGGTGCAAGACTTGGCTTTATCGGGGAAGCTGGTTTCACTTCCATCCCTCAGTACATGATATTAGAGGGACTTTTGGAAGCAGAAACAAAAGAGGAGAAGACAAAGCTTTTACAGGATACAGAAGGGACCAGTGATAAATACGTCCGCACCATTTGCAGCTGGCTCATACAGGTGGGCTGGATCAGTAAGGCAGCGAAGGAAGTGATCACAGGTACCGGCAGTAAGAGCTCATCTGCAATGATACCTCAGTCTTATAAGCTTACTCTAAAAGGAAGAACGGTAATAAAGCACATCACGGGCGTATCCAGGTTTGCCAGGATTCCCAAGCGGGTCATGTGGGACATGCTGGCGACGAAAGTGGCTGACCGGGACTACTTAAGAAACAGAAGAACCTATATTATAAAATACTTGGAAGGCAGCTATCGTTCCCCTGTACAGGTTAAGGAATATTTAGAGAGCAAAGGGCTGAAAGAAGAAATTGAGACCATTCTTGATGATATCAGAAGCTTTGAAAACATCGGCCTTCAGGTAAAAAAGTCAGGAGATACCTACCGGATCATGGATGAAATTGTGGGCTTAGAGCTTCCGGAAGACGGAGAATTTATGTTACCTGTTAAATCAGAAGTCTCTGTCTTTAAAGATTATCTAAGAACTCATTTGACTCATGTAGACCACAGATACTTAATTTTGGTGGATCTTGGTTTTGACGGAAGCTCAGACCGTGATTATGAGATGAAGACAGCGGAACTTTTTACAGCCGAACTTGGTTTCATGGGCGCAAGACTTGGGGATACCAGAAAGCCTGATGTGTGTGTGTACCACGGAGCCAATGGGCTTATCATTGATAACAAAGCATATGGAAAAGGTTACTCTCTTCCGATCAAGCAGGCGGATGAGATCTATCGGTATATTGAGGAAAACAAGGAGCGGGATGCCCGTTTAAATCCAAACCAGTGGTGGAAGGTCTTTGACGAGTCTGTGACTCATTTCCGGTTTGCATTTATCTCAGGTTCCTTCACCGGAGGCTTTAAGGACCGGATTGAACTTATTTCCATGCGGTCAGGAATCTGCGGAGCGGCAGTCAATTCCGTCAACCTGCTCTTAATGGCAGAGGAACTGAAATCAGGAAGGCTGGACTATGAGGAATGGTTCCAATATTTTGATTGCAACGATGAAATTTCCTTTCCAGTATCCCTTACATAG", 
    "M2.BstF5": "ATGTACATAAAAAGTCCTCTTAACTATACAGGGGGAAAGTATAAGATACTAGAGCCAGTCTTTCAGGCATTTCCAAAAAGGATAAGGACCTTTGTGGATGTGTTTGCTGGAGGTTTTAACGTGGGAATCAATGCAAAGGCAGAACGGATCATCTGTAACGATCAGATTACTTACCTAATTGAATTGTTCCAGCTGTTTCAAACAACAGAAATCCATGAGCTTTTGAAGGAAATCCAGAGCATCATTGACACGTACCAGTTGACCCAGCAGAATAAGGAGGGCTATTATGCCCTTCGCTCAGAGTATAATAAAAGTAAGGATTTGGTGATGCTGTTCGTGCTCACCTGCTACGCCTTTAATCACCAGATACGCTTTAATAACAGCCATGAGTTCAACTCCCCCTTTGGGAGAAACCGAAGCTCATTTAACAAAAACATTGAAAAGAATCTGACCCAGTTCTGCCAGGCACTGCAGGAAAAGAACATAGAGTTTTCCAACCGGGATTTTATGGAGCTTGACTATTCCTCTCTTGGAAAGGAAGACCTGGTCTACTGTGACCCTCCATATCTGATATCCACAGGAAACTACAACGATGGAAACCGTGGGTTTAAGGATTGGAAGGAAAAGGAAGAAAAGGAATTGTTAGGGCTTTTAGATAAGCTGGATTCCATGGGAACCCGGTTTGCCTTATCCAATGTGCTGTATCATAAAGGCATGTCCAATGAGCTTTTGATTGAGTGGAGTAAAAAGTACAAGATTCATTATATTGACAAGACCTATTCCAATTGCAATTACCAGTTCAAGGAGCGGAATGCGGTTACGGTTGAGGTATTAATAACCAATTATTAA"
}

file_list = os.listdir(folder)

# Create an HTML template for the alignment output
html_template = '''
<!DOCTYPE html>
<html>
<head>
    <title>Sequence Alignments</title>
</head>
<body>
    <h1>Sequence Alignments</h1>
    {}
</body>
</html>
'''

# Initialize a variable to store all the formatted alignments
all_alignments = ""

for file_name in file_list:
    file_path = os.path.join(folder, file_name)
    f = str(file_name)

    # Check if the file is a FASTA file (you may want to add more checks if needed)
    with open(file_path, "r", encoding="utf-8", errors="ignore") as file:  # Specify encoding and handle errors
        # Use Biopython's SeqIO.parse to read the FASTA file
        for record in SeqIO.parse(file, "fasta"):
            for key in seqs.keys():
                if key in f:
                    seq1 = seqs[key]
                    seq2 = record.seq
                    aligned_seq1, aligned_seq2, max_score = smith_waterman(seq1, seq2)

                    # Format the sequences for HTML
                    aligned_seq1_formatted = ' '.join(aligned_seq1[i:i + 60] for i in range(0, len(aligned_seq1), 60))
                    aligned_seq2_formatted = ' '.join(aligned_seq2[i:i + 60] for i in range(0, len(aligned_seq2), 60))

                    # Create the HTML content for this alignment
                    alignment_content = f"<h2>Alignment between {key} and {f}</h2>\n"
                    alignment_content += f"<pre>{aligned_seq1_formatted}\n{aligned_seq2_formatted}</pre>\n\n"

                    # Append the alignment content to the accumulated alignments
                    all_alignments += alignment_content

# Create the HTML content using the template and all alignments
html_content = html_template.format(all_alignments)

# Write the HTML content to the output file
output_file_path = os.path.join(folder, "all_alignments.html")
with open(output_file_path, "w") as output_file:
    output_file.write(html_content)


