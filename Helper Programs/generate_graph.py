import argparse
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from domainator.seq_dist import seq_dist
from domainator.data_matrix import DataMatrix
import io
from bs4 import BeautifulSoup

parser = argparse.ArgumentParser(description='Generate statistics from remt2 HTML output.')
parser.add_argument('-i', type=str, nargs='+', default=None, required=True, help='Input HTML file generated by remt2 or hdf5 file. Name should only include the prefix.')
parser.add_argument('-o', type=str, nargs='+', default="", required=True, help='Add prefix to output files. Default is no prefix.')
args = parser.parse_args()

if args.i is not None and args.i[0].endswith('.html'):
    with open(args.i[0], 'r') as file:
        soup = BeautifulSoup(file, 'html.parser')

    # Find the table by its ID
    table = soup.find('table', {'id': 'myTable'})

    # Extract table headers to find the index of the "Distance" column
    headers = [header.text for header in table.find('thead').find_all('th')]
    translation_index = headers.index('Translation')
    strain_index = headers.index('Strain')
    loci_index = headers.index('Loci')

    re_sequences=""
    mt_sequences=""

    # Extract the values from the "Distance" column
    for row in table.find('tbody').find_all('tr'):
        cells = row.find_all('td')
        # Get strain name
        strain = cells[strain_index].get_text(strip=True)
        # Translations = [re_translation, mt_translation]
        translations = cells[translation_index].get_text(strip=True).split()[1:] # Index 0 is "RE:"
        translations[0] = translations[0][:-2] # Get rid of M: prefix
        # Loci = [re_locus, mt_locus]
        loci = cells[loci_index].get_text(strip=True).split()[1:]
        loci[0] = loci[0][:-2]

        re_sequences += f'>strain:{strain.replace(" ", "_")}locus:{loci[0]}_re\n{translations[0]}\n'
        mt_sequences += f'>strain:{strain.replace(" ", "_")}locus:{loci[1]}_mt\n{translations[1]}\n'

    with open(f"{args.o[0]}re_sequences.fasta", "w") as f:
        f.write(re_sequences)
    with open(f"{args.o[0]}mt_sequences.fasta", "w") as f:
        f.write(mt_sequences)
    # seq_dist(input_path, input_type, reference_path, reference_type, k, algorithm, mode, threads, dense, dense_text, sparse, lb):
    seq_dist(f"{args.o[0]}re_sequences.fasta", "fasta", f"{args.o[0]}re_sequences.fasta", "fasta", None, "diamond_us", "score", 8, None, None, f"{args.o[0]}re_simlarity_matrix.hdf5", 0)
    seq_dist(f"{args.o[0]}mt_sequences.fasta", "fasta", f"{args.o[0]}mt_sequences.fasta", "fasta", None, "diamond_us", "score", 8, None, None, f"{args.o[0]}mt_simlarity_matrix.hdf5", 0)

    re_matrix = DataMatrix.from_file(f"{args.o[0]}re_simlarity_matrix.hdf5")
    mt_matrix = DataMatrix.from_file(f"{args.o[0]}mt_simlarity_matrix.hdf5")
else:
    print('Error: No input file specified.')
    exit(1)

if args.i is not None and args.i[0].endswith('.hdf5'):
    re_matrix = DataMatrix.from_file(f"{args.i[0]}re_simlarity_matrix.hdf5")
    mt_matrix = DataMatrix.from_file(f"{args.i[0]}mt_simlarity_matrix.hdf5")
else:
    print('Error: No input file specified.')
    exit(1)

print(re_matrix.columns)

